{"version":3,"sources":["Home.js","Register.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","Register","props","handleInputChange","event","target","value","name","setState","onSubmit","preventDefault","fetch","method","body","JSON","stringify","state","headers","then","res","status","Error","error","history","push","catch","err","console","alert","username","password","this","className","htmlFor","type","placeholder","onChange","required","Value","Login","json","data","log","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAEqBA,E,iLAGjB,OACE,gCAAQ,6BACR,2BACE,2C,GAN0BC,a,QCAbC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,kBAAoB,SAACC,GAAW,IAAD,EACLA,EAAMC,OAAtBC,EADqB,EACrBA,MAAOC,EADc,EACdA,KACf,EAAKC,SAAL,eACGD,EAAOD,KAZO,EAgBnBG,SAAW,SAACL,GACVA,EAAMM,iBACNC,MAAM,sCAAuC,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKC,OAC1BC,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAIC,OAIN,MADc,IAAIC,MAAMF,EAAIG,OAF5B,EAAKpB,MAAMqB,QAAQC,KAAK,QAM3BC,OAAM,SAAAC,GACLC,QAAQL,MAAMI,GACdE,MAAM,sBAjCR,EAAKZ,MAAQ,CACXT,KAAM,GACNsB,SAAW,GACXC,SAAU,IALK,E,sEAwCjB,OACE,gCACA,0BAAMrB,SAAUsB,KAAKtB,SAAUuB,UAAU,aACzC,wCACE,4BACA,4BACI,2BAAOC,QAAQ,QAAf,QACA,2BAAOC,KAAK,OACV3B,KAAK,OACL4B,YAAY,GACZ7B,MAAOyB,KAAKf,MAAMT,KAClB6B,SAAUL,KAAK5B,kBACfkC,UAAQ,IACV,sDAEF,4BACE,2BAAOJ,QAAQ,YAAf,aACA,2BAAOC,KAAK,OACV3B,KAAK,WACL4B,YAAY,GACZ7B,MAAOyB,KAAKf,MAAMa,SAClBO,SAAUL,KAAK5B,kBACfkC,UAAQ,IACV,2DAEF,4BACE,2BAAOJ,QAAQ,YAAf,YACA,2BAAOC,KAAK,WACV3B,KAAK,WACL4B,YAAY,GACZ7B,MAAOyB,KAAKf,MAAMc,SAClBM,SAAUL,KAAK5B,kBACfkC,UAAQ,IACV,0DAEF,4BACE,2BAAOH,KAAK,SAASI,MAAM,mB,GA7EDtC,aCAjBuC,E,YACnB,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,kBAAoB,SAACC,GAAW,IAAD,EACLA,EAAMC,OAAtBC,EADqB,EACrBA,MAAOC,EADc,EACdA,KACf,EAAKC,SAAL,eACGD,EAAOD,KAXO,EAenBG,SAAW,SAACL,GACVA,EAAMM,iBACNC,MAAM,mCAAoC,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKC,OAC1BC,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAIC,OAKN,MADc,IAAIC,MAAMF,EAAIG,OAH5B,EAAKpB,MAAMqB,QAAQC,KAAK,KACxBL,EAAIqB,UAMPtB,MAAK,SAAAuB,GACJd,QAAQe,IAAID,MAEbhB,OAAM,SAAAC,GACLC,QAAQL,MAAMI,GACdE,MAAM,mBApCR,EAAKZ,MAAQ,CACXa,SAAW,GACXC,SAAU,IAJK,E,sEA2CjB,OACE,gCACA,0BAAMrB,SAAUsB,KAAKtB,SAAUuB,UAAU,aACzC,qCACE,4BACE,4BACE,2BAAOC,QAAQ,YAAf,aACA,2BAAOC,KAAK,OACV3B,KAAK,WACL4B,YAAY,GACZ7B,MAAOyB,KAAKf,MAAMa,SAClBO,SAAUL,KAAK5B,kBACfkC,UAAQ,IACV,2DAEF,4BACE,2BAAOJ,QAAQ,YAAf,YACA,2BAAOC,KAAK,WACV3B,KAAK,WACL4B,YAAY,GACZ7B,MAAOyB,KAAKf,MAAMc,SAClBM,SAAUL,KAAK5B,kBACfkC,UAAQ,IACV,0DAEF,4BACE,2BAAOH,KAAK,SAAS5B,MAAM,mB,GAtEJN,aCyBpB2C,G,uLAlBX,OACE,6BACE,wBAAIX,UAAU,QACZ,wBAAIA,UAAU,YAAW,kBAAC,IAAD,CAAMY,GAAG,KAAT,SACzB,wBAAIZ,UAAU,YAAW,kBAAC,IAAD,CAAMY,GAAG,UAAT,UACzB,wBAAIZ,UAAU,YAAW,kBAAC,IAAD,CAAMY,GAAG,aAAT,cAG3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhD,IACjC,kBAAC,IAAD,CAAO8C,KAAK,SAASE,UAAWR,IAChC,kBAAC,IAAD,CAAOM,KAAK,YAAYE,UAAW9C,U,GAb3BD,cCKEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.bf06e72e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Home extends Component {\r\n \r\n  render() {\r\n    return (\r\n      <center><div>\r\n      <p>\r\n        <h1>Home</h1>\r\n        </p>\r\n      </div>\r\n      </center>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Register extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '',\r\n      username : '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    fetch('http://localhost:8080/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(this.state),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        this.props.history.push('/');\r\n      } else {\r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      alert('Gagal Register');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <center>\r\n      <form onSubmit={this.onSubmit} className=\"formStyle\">\r\n      <h1>Register</h1>\r\n        <ul>\r\n        <li>\r\n            <label htmlFor=\"name\">Nama</label>\r\n            <input type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"\"\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              required />\r\n            <span>Masukkan Nama Anda!</span>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"username\">User Name</label>\r\n            <input type=\"text\"\r\n              name=\"username\"\r\n              placeholder=\"\"\r\n              value={this.state.username}\r\n              onChange={this.handleInputChange}\r\n              required />\r\n            <span>Masukkan User Name Anda!</span>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"\"\r\n              value={this.state.password}\r\n              onChange={this.handleInputChange}\r\n              required />\r\n            <span>Masukkan Password Anda!</span>\r\n          </li>\r\n          <li>\r\n            <input type=\"submit\" Value=\"Submit\" />\r\n          </li>\r\n        </ul>\r\n      </form>\r\n      </center>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      username : '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    fetch('http://localhost:8080/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(this.state),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        this.props.history.push('/');\r\n        res.json()\r\n      } else {\r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n    })\r\n    .then(data => {\r\n      console.log(data)\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      alert('Gagal Login');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <center>\r\n      <form onSubmit={this.onSubmit} className=\"formStyle\">\r\n      <h1>Login</h1>\r\n        <ul>\r\n          <li>\r\n            <label htmlFor=\"username\">User Name</label>\r\n            <input type=\"text\"\r\n              name=\"username\"\r\n              placeholder=\"\"\r\n              value={this.state.username}\r\n              onChange={this.handleInputChange}\r\n              required />\r\n            <span>Masukkan User Name Anda!</span>\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"\"\r\n              value={this.state.password}\r\n              onChange={this.handleInputChange}\r\n              required />\r\n            <span>Masukkan Password Anda!</span>\r\n          </li>\r\n          <li>\r\n            <input type=\"submit\" value=\"Submit\" />\r\n          </li>\r\n        </ul>\r\n      </form>\r\n      </center>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport Register from './Register';\r\nimport Login from './Login';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div >\r\n        <ul className=\"menu\">\r\n          <li className=\"menuItem\"><Link to=\"/\">Home</Link></li>\r\n          <li className=\"menuItem\"><Link to=\"/login\">Login</Link></li>\r\n          <li className=\"menuItem\"><Link to=\"/register\">Register</Link></li>\r\n        </ul>\r\n\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}